generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id           String         @id
  email        String         @unique
  name         String?
  password     String?
  isActive     Boolean        @default(false)
  isAdmin      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  preferences  Json?          @default("{}")
  Conversation Conversation[]
  UserFacts    UserFacts[]
}

model Conversation {
  id        String    @id
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  summary   String?
}

model Message {
  id             String       @id
  conversationId String
  role           String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  metadata       Json?        @default("{}")
  fullPrompt     String?
  hasImages      Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  images         MessageImage[]
}

model MessageImage {
  id        String   @id @default(cuid())
  messageId String
  imageUrl  String   // URL atau path ke image
  imageType String   // "base64", "url", "file_path"
  mimeType  String?  // "image/jpeg", "image/png", etc.
  size      Int?     // Size in bytes
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model UserFacts {
  id                        String   @id
  userId                    String
  fact                      String
  source                    String   @default("manual")
  extracted_from_message_id String?
  confidence                Float?   @default(0.0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  status                    String   @default("active")
  user                      User     @relation(fields: [userId], references: [id])
}

model AssistantFact {
  id                        String   @id
  fact                      String
  source                    String   @default("manual")
  status                    String   @default("active")
  extracted_from_message_id String?
  confidence                Float?   @default(0.0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
